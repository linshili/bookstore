<?xml version="1.0" encoding="UTF-8"?>
<!-- 设置步骤
	1、添加spring的约束文件
	2、需要处理的事：
		生产mybatis工厂
		得到整个项目的xml文件
		起别名
		扫描mapper文件；		
 -->
	<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context 
     http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc 
     http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx 
     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<!-- 自动扫描 -->
    <context:component-scan base-package="com.nsc.*.service"/>
    
    <!-- 第一种方式：加载一个properties文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:properties/config.properties"/>
    </bean>
    
    <!-- 配置第一个数据源 -->
    <!-- <bean id="defultdataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/> -->
        <!-- 初始化连接大小 -->
        <!-- <property name="initialSize" value="${initialSize}"></property> -->
        <!-- 连接池最大数量 -->
        <!-- <property name="maxActive" value="${maxActive}"></property> -->
        <!-- 连接池最大空闲 -->
        <!-- <property name="maxIdle" value="${maxIdle}"></property> -->
        <!-- 连接池最小空闲 -->
        <!-- <property name="minIdle" value="${minIdle}"></property> -->
        <!-- 获取连接最大等待时间 -->
        <!-- <property name="maxWait" value="${maxWait}"></property>
    </bean> -->
 
    <!-- 配置第二个数据源 -->
    <!-- <bean id="jrt_dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${_driver}"/>
        <property name="url" value="${_url}"/>
        <property name="username" value="${_username}"/>
        <property name="password" value="${_password}"/> -->
        <!-- 初始化连接大小 -->
        <!-- <property name="initialSize" value="${initialSize}"></property> -->
        <!-- 连接池最大数量 -->
        <!-- <property name="maxActive" value="${maxActive}"></property> -->
        <!-- 连接池最大空闲 -->
        <!-- <property name="maxIdle" value="${maxIdle}"></property> -->
        <!-- 连接池最小空闲 -->
        <!-- <property name="minIdle" value="${minIdle}"></property> -->
        <!-- 获取连接最大等待时间 -->
       <!--  <property name="maxWait" value="${maxWait}"></property>
    </bean> -->
 
    <!-- 动态配置数据源 -->
    <bean id="dataSource" class="com.nsc.web.util.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <!-- 指定lookupKey和与之对应的数据源，这里的key可以自行定义，要切换数据库的时候以key为标识，不要写错 -->
                <entry key="defultdataSource" value-ref="defultdataSource"></entry>
                <entry key="jrt_dataSource" value-ref="jrt_dataSource"></entry>
            </map>
        </property>
        <!-- 这里可以指定默认的数据源 -->
        <property name="defaultTargetDataSource" ref="defultdataSource" />
    </bean>
 
 	
 
    <!-- mybatis和spring完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mapping/*.xml"></property>
        <property name="typeAliasesPackage" value="com.nsc.backend.entity"></property>
    </bean>
 
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.nsc.*.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
 
 
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
 
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->
    
    
    
    
	<!-- mybatis sessionFactory配置，生产工厂 -->
	<!-- <bean  id="sqlsessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> -->
		<!--引入数据源，生成sessionFactory -->
		<!-- <property name="dataSource" ref="dataSource"/> -->
		<!-- 扫描xml文件 -->
		<!-- 暂时，扫描整个包，不止是对xml进行扫描 -->
		<!-- <property name="mapperLocations" value="classpath:mapping/*.xml"></property> -->
		<!-- 起别名，对pojo类 -->                    
		<!-- <property name="typeAliasesPackage" value="com.nsc.backend.entity"></property> -->
		
	<!-- </bean> -->
	
	<!-- 扫描mapper.java包 -->
	<!-- <bean  class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.nsc.backend.mapper"></property>
		
	</bean> -->

	</beans>
