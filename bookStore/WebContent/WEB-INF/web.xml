<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">
	
	<!-- Spring和mybatis的配置文件 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:application-context.xml</param-value>
	</context-param>
	
	   <!-- 加载log4j配置文件 -->
    <context-param>
      <param-name>log4jConfigLocation</param-name>
      <param-value>classpath:properties/log4j.properties</param-value>
      <!-- <param-value>/WEB-INF/log4j.xml</param-value> -->
    </context-param>
    <listener>
       <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>
	<!-- 编码过滤器  Spring自带的字符编码过滤器主要针对“POST”请求，对“GET”请求无效。
		 修改tomcat编码设置server.xml，解决get请求
	-->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<async-supported>true</async-supported>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 激活Tomcat的defaultServlet来处理静态文件,放在dispatcherservlet前面
		 让defaultServlet先拦截，这个就不会进入Spring了，我想性能是最好的吧。
	 -->
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.css</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.gif</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.jpg</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.png</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.js</url-pattern>
	</servlet-mapping>
	<!-- 防止Spring内存溢出监听器 
		 这个监听器应该在web.xml的其他listener（例如ContextLoaderListener）之前注册，这样就会在生命周期的适当的时间完全起作用。
	-->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	
	<!-- Spring MVC servlet前端控制器 -->
	<servlet>
		<servlet-name>SpringMVC</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:config/spring-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>
	<servlet-mapping>
		<servlet-name>SpringMVC</servlet-name>
		<!-- 此处可以可以配置成*.do，静态文件无需交给spring进行处理 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- Spring监听器  
		 实现了ServletContextListener接口的作用就是当项目一经启动，就会激活实现了此接口的类方法，可以进行相关的初始化操作。 
		会进入contextInitialized方法中，进行Spring的相关配置。
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- 初始化微信菜单栏监听器 -->
	<!-- <listener>  
 	 <listener-class> com.litt.wechat.Util.Menu.WebContextListener</listener-class>  
	</listener> -->
	<!-- 配置登陆过滤器 -->
	<!-- <filter>
	 <filter-name>login</filter-name>
	 <filter-class>com.litt.nic.security.LoginFilter</filter-class>
	</filter>
	<filter-mapping>
	 <filter-name>login</filter-name>
	 <url-pattern>/WEB-INF/views/*</url-pattern>
	</filter-mapping> -->
	 
	 
	 
	 <!-- 加载log4j配置文件 --> 
	   <!-- log4j路径配置 -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:properties/log4j.properties</param-value>
    </context-param>
	  <listener> 
	  	<listener-class>
	  		org.springframework.web.util.Log4jConfigListener
	  	</listener-class> 
	  </listener>
	  
	

	
	<welcome-file-list>
		<welcome-file>/login.jsp</welcome-file>
	</welcome-file-list>
</web-app>